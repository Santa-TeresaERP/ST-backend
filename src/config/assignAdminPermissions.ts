import Permission from '@models/permissions'
import Module from '@models/modules'
import RolesPermissions from '@models/rolesPermissions'

const assignAdminPermissions = async (adminRoleId: string) => {
  try {
    console.log(`üîß Asignando permisos al rol Admin ID: ${adminRoleId}`)

    // Obtener todos los m√≥dulos
    const modules = await Module.findAll()
    console.log(`üìã Encontrados ${modules.length} m√≥dulos`)

    if (modules.length === 0) {
      console.log('‚ö†Ô∏è No se encontraron m√≥dulos')
      return
    }

    // Asignar todos los permisos en todos los m√≥dulos al rol de administrador
    for (const module of modules) {
      console.log(
        `üìù Creando permiso para m√≥dulo: ${module.name} (ID: ${module.id})`,
      )

      // Crear un permiso espec√≠fico para el Admin con todos los permisos habilitados
      const permission = await Permission.create({
        moduleId: module.id,
        canRead: true,
        canWrite: true,
        canEdit: true,
        canDelete: true,
      })

      console.log(`‚úÖ Permiso creado con ID: ${permission.id}`)

      const [, created] = await RolesPermissions.findOrCreate({
        where: {
          roleId: adminRoleId,
          permissionId: permission.id,
        },
        defaults: {
          roleId: adminRoleId,
          permissionId: permission.id,
        },
      })

      if (created) {
        console.log(
          `üîó Relaci√≥n rol-permiso creada para m√≥dulo: ${module.name}`,
        )
      } else {
        console.log(
          `‚ö†Ô∏è Relaci√≥n rol-permiso ya exist√≠a para m√≥dulo: ${module.name}`,
        )
      }
    }

    console.log('‚úÖ Admin permissions assigned successfully')
  } catch (err) {
    console.error('‚ùå Error assigning admin permissions:', err)
    throw err
  }
}

export default assignAdminPermissions
