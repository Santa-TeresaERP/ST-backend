services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_NAMEDB: ${PG_NAMEDB}
      PG_HOST: ${PG_HOST}
      SECRET_KEY: ${SECRET_KEY}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      PORT: ${PORT}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '${PORT}:${PORT}'
    restart: always
    networks:
      - app-network

  postgres:
    image: postgres:17-alpine3.20
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_NAMEDB}
    ports:
      - '5432:5432'
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${PG_USER} -d ${PG_NAMEDB}']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
